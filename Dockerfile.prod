# Multi-stage build for Flutter web application with proxy server
FROM ghcr.io/cirruslabs/flutter:stable AS build

# Set working directory
WORKDIR /app

# Proxy configuration for build stage
ARG HTTP_PROXY
ARG HTTPS_PROXY
ARG ALL_PROXY
ARG NO_PROXY
ENV HTTP_PROXY=$HTTP_PROXY
ENV HTTPS_PROXY=$HTTPS_PROXY
ENV ALL_PROXY=$ALL_PROXY
ENV NO_PROXY=$NO_PROXY

# Copy pubspec files
COPY pubspec.yaml pubspec.lock ./

# Get dependencies
RUN flutter pub get

# Copy source code
COPY . .

# Generate code (injectable, json_serializable, etc.)
RUN flutter packages pub run build_runner build --delete-conflicting-outputs

# Build web application
RUN flutter build web --release

# Production stage with Nginx and Proxy Server
FROM node:18-alpine AS proxy

# Set working directory
WORKDIR /app

# Copy proxy server files
COPY debug/package*.json ./
RUN npm install --production

COPY debug/proxy-server.js ./

# Main production stage
FROM nginx:alpine

# Install Node.js for proxy server
RUN apk add --no-cache nodejs npm curl

# Copy proxy server from proxy stage
COPY --from=proxy /app /app/proxy

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built web application
COPY --from=build /app/build/web /usr/share/nginx/html

# Create directory for logs
RUN mkdir -p /var/log/nginx

# Create startup script to generate .env file and start proxy
RUN echo '#!/bin/sh' > /usr/local/bin/start-services.sh && \
    echo 'echo "OPENAI_API_KEY=${OPENAI_API_KEY}" > /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "GOOGLE_API_KEY=${GOOGLE_API_KEY}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "GOOGLE_API_KEYS_FALLBACK=${GOOGLE_API_KEYS_FALLBACK}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "ALL_PROXY=${ALL_PROXY}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "BACKUP_PROXIES=${BACKUP_PROXIES}" >> /usr/share/nginx/html/assets/.env' >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "HTTP_PROXY=${HTTP_PROXY}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "HTTPS_PROXY=${HTTPS_PROXY}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "NO_PROXY=${NO_PROXY}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "STABILITY_API_KEY=${STABILITY_API_KEY}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "YC_API_KEY_ID=${YC_API_KEY_ID}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "YC_API_KEY=${YC_API_KEY}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "YC_FOLDER_ID=${YC_FOLDER_ID}" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'echo "PROXY_SERVER_URL=http://localhost:3001" >> /usr/share/nginx/html/assets/.env' >> /usr/local/bin/start-services.sh && \
    echo 'cd /app/proxy && npm start &' >> /usr/local/bin/start-services.sh && \
    echo 'nginx -g "daemon off;"' >> /usr/local/bin/start-services.sh && \
    chmod +x /usr/local/bin/start-services.sh

# Expose ports
EXPOSE 80 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health && curl -f http://localhost:3001/health || exit 1

# Start services
CMD ["/usr/local/bin/start-services.sh"]
