#!/bin/bash

# iOS Testing Script for LandComp
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ iOS

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üß™ LandComp iOS Testing Script"
echo "================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Flutter
check_flutter() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Flutter..."
    if ! command -v flutter &> /dev/null; then
        log_error "Flutter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flutter —Å https://flutter.dev"
        exit 1
    fi
    log_success "Flutter —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(flutter --version | head -n 1)"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Xcode
check_xcode() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xcode..."
    if ! command -v xcodebuild &> /dev/null; then
        log_error "Xcode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Xcode –∏–∑ App Store"
        exit 1
    fi
    log_success "Xcode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(xcodebuild -version | head -n 1)"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Flutter doctor
check_flutter_doctor() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Flutter..."
    if ! flutter doctor | grep -q "iOS toolchain"; then
        log_warning "iOS toolchain –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'flutter doctor' –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
    else
        log_success "iOS toolchain –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
setup_dependencies() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –û—á–∏—Å—Ç–∫–∞
    flutter clean
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    flutter pub get
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ iOS –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [ -d "ios" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ iOS –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (CocoaPods)..."
        cd ios
        if command -v pod &> /dev/null; then
            pod install
            log_success "CocoaPods –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else
            log_warning "CocoaPods –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo gem install cocoapods"
        fi
        cd ..
    fi
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
check_devices() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤..."
    
    # –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    flutter devices
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ iOS —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
    if command -v xcrun &> /dev/null; then
        log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ iOS —Å–∏–º—É–ª—è—Ç–æ—Ä—ã:"
        xcrun simctl list devices available | grep iPhone
    fi
}

# –ó–∞–ø—É—Å–∫ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ
run_simulator() {
    log_info "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ iOS —Å–∏–º—É–ª—è—Ç–æ—Ä–µ..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    if ! flutter devices | grep -q "iOS Simulator"; then
        log_warning "iOS —Å–∏–º—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–º—É–ª—è—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é"
        log_info "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: open -a Simulator"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    flutter run -d ios --debug
}

# –ó–∞–ø—É—Å–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
run_device() {
    log_info "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if ! flutter devices | grep -q "iPhone"; then
        log_warning "iPhone –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ–≤–µ—Ä–µ–Ω"
        log_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:"
        log_info "1. iPhone –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ USB"
        log_info "2. –ù–∞ iPhone: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û—Å–Ω–æ–≤–Ω—ã–µ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º ‚Üí –î–æ–≤–µ—Ä—è—Ç—å"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    flutter run -d ios --debug
}

# –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞
build_release() {
    log_info "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–ª–∏–∑–∞..."
    
    # –°–±–æ—Ä–∫–∞ iOS
    flutter build ios --release
    
    log_success "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∞–π–ª—ã –≤: build/ios/iphoneos/"
    log_info "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è IPA —Ñ–∞–π–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ ios/Runner.xcworkspace –≤ Xcode"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    
    # Unit —Ç–µ—Å—Ç—ã
    flutter test
    
    # Integration —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if [ -d "integration_test" ]; then
        flutter test integration_test/
    fi
    
    log_success "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
analyze_code() {
    log_info "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞..."
    
    # Flutter analyze
    flutter analyze
    
    log_success "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
show_menu() {
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo "1) –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ"
    echo "2) –ó–∞–ø—É—Å–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º iPhone"
    echo "3) –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞"
    echo "4) –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    echo "5) –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"
    echo "6) –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    echo "7) –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
    echo "0) –í—ã—Ö–æ–¥"
    echo ""
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-7): " choice
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LandComp iOS Testing!"
    echo ""
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_flutter
    check_xcode
    check_flutter_doctor
    
    while true; do
        show_menu
        
        case $choice in
            1)
                setup_dependencies
                run_tests
                analyze_code
                run_simulator
                ;;
            2)
                setup_dependencies
                run_device
                ;;
            3)
                setup_dependencies
                build_release
                ;;
            4)
                run_tests
                ;;
            5)
                analyze_code
                ;;
            6)
                setup_dependencies
                ;;
            7)
                check_devices
                ;;
            0)
                log_success "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
                exit 0
                ;;
            *)
                log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                ;;
        esac
        
        echo ""
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
    done
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if [ $# -eq 0 ]; then
    main
else
    case $1 in
        "simulator")
            setup_dependencies
            run_simulator
            ;;
        "device")
            setup_dependencies
            run_device
            ;;
        "build")
            setup_dependencies
            build_release
            ;;
        "test")
            run_tests
            ;;
        "analyze")
            analyze_code
            ;;
        "deps")
            setup_dependencies
            ;;
        "devices")
            check_devices
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [simulator|device|build|test|analyze|deps|devices]"
            echo "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é"
            exit 1
            ;;
    esac
fi
