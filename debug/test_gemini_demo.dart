/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Gemini Image Generation
/// 
/// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
library;

import 'dart:io';
import 'dart:convert';
import 'package:path/path.dart' as path;

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Gemini Image Generation
class GeminiImageDemo {
  
  GeminiImageDemo({
    required this.testImagesDir,
    required this.outputDir,
  });
  static const String _modelName = 'gemini-2.5-flash-image-preview';
  static const String _apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/$_modelName:generateContent';
  static const String _prompt = '–æ–±—ä–µ–¥–∏–Ω–∏ —ç—Ç–∏ —Ñ–æ—Ç–æ –≤ –æ–¥–∏–Ω —É—á–∞—Å—Ç–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å–¥–µ–ª–∞–π 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∞—Ä–∞–∏–Ω—Ç–∞ –∏ –æ–ø–∏—à–∏ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö';
  
  final String testImagesDir;
  final String outputDir;

  /// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  Future<void> runDemo() async {
    print('üé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Gemini Image Generation');
    print('=======================================');
    print('');

    try {
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await _createOutputDirectory();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      final imageFiles = await _getImageFiles();
      print('üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}');
      
      if (imageFiles.isEmpty) {
        print('‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ $testImagesDir');
        print('üí° –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É test-images –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
      await _showImageInfo(imageFiles);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∑–∞–ø—Ä–æ—Å
      await _showRequestExample(imageFiles);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
      await _createExampleResponse();
      
      print('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      print('');
      print('üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:');
      print('   1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á: https://aistudio.google.com/app/apikey');
      print('   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: set GOOGLE_API_KEY=your_api_key_here');
      print('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: dart run debug/test_gemini_simple.dart');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: $e');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  Future<void> _createOutputDirectory() async {
    final outputDirPath = Directory(outputDir);
    if (!await outputDirPath.exists()) {
      await outputDirPath.create(recursive: true);
      print('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $outputDir');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  Future<List<File>> _getImageFiles() async {
    final testDir = Directory(testImagesDir);
    if (!await testDir.exists()) {
      throw Exception('–ü–∞–ø–∫–∞ $testImagesDir –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    final imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    final files = <File>[];
    
    await for (final entity in testDir.list()) {
      if (entity is File) {
        final extension = path.extension(entity.path).toLowerCase();
        if (imageExtensions.contains(extension)) {
          files.add(entity);
        }
      }
    }
    
    return files;
  }

  /// –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
  Future<void> _showImageInfo(List<File> imageFiles) async {
    print('');
    print('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö:');
    for (var i = 0; i < imageFiles.length; i++) {
      final file = imageFiles[i];
      final size = await file.length();
      final sizeKB = (size / 1024).round();
      print('   ${i + 1}. ${path.basename(file.path)} ($sizeKB KB)');
    }
  }

  /// –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
  Future<void> _showRequestExample(List<File> imageFiles) async {
    print('');
    print('üì§ –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API:');
    print('   URL: $_apiUrl?key=YOUR_API_KEY');
    print('   –ú–æ–¥–µ–ª—å: $_modelName');
    print('   –ü—Ä–æ–º–ø—Ç: $_prompt');
    print('   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    var totalSize = 0;
    for (final file in imageFiles) {
      totalSize += await file.length();
    }
    final totalSizeKB = (totalSize / 1024).round();
    print('   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: $totalSizeKB KB');
    
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ base64
    final estimatedBase64Size = (totalSize * 1.37 / 1024).round();
    print('   –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä base64: $estimatedBase64Size KB');
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
  Future<void> _createExampleResponse() async {
    print('');
    print('üì• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API:');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const exampleText = '''
–í–∞—Ä–∏–∞–Ω—Ç 1: –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —Å–∞–¥
–≠—Ç–æ—Ç –¥–∏–∑–∞–π–Ω —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ –ø—Ä–æ—Å—Ç–æ—Ç—É –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è. 
–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: –¥–µ—Ä–µ–≤–æ, –∫–∞–º–µ–Ω—å, –≥—Ä–∞–≤–∏–π. –†–∞—Å—Ç–µ–Ω–∏—è –ø–æ–¥–æ–±—Ä–∞–Ω—ã —Å —É—á–µ—Ç–æ–º 
–∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π - —Ö–≤–æ–π–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è, –≤–µ—Ä–µ—Å–∫, –º—Ö–∏. –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Å–¥–µ—Ä–∂–∞–Ω–Ω–∞—è: 
–∑–µ–ª–µ–Ω—ã–µ, —Å–µ—Ä—ã–µ, –±–µ–∂–µ–≤—ã–µ —Ç–æ–Ω–∞ —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –±–µ–ª–æ–≥–æ –∏ —á–µ—Ä–Ω–æ–≥–æ.

–í–∞—Ä–∏–∞–Ω—Ç 2: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —Å–∞–¥ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—é
–í —ç—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç —á–µ—Ç–∫–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã –∏ –ª–∏–Ω–∏–∏. –î–æ—Ä–æ–∂–∫–∏ –≤—ã–ª–æ–∂–µ–Ω—ã 
–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º–∏ –ø–ª–∏—Ç–∞–º–∏, –∫–ª—É–º–±—ã –∏–º–µ—é—Ç —Å—Ç—Ä–æ–≥–∏–µ –æ—á–µ—Ä—Ç–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ 
–º–∞—Ç–µ—Ä–∏–∞–ª—ã: –∫–æ—Ä—Ç–µ–Ω-—Å—Ç–∞–ª—å, –±–µ—Ç–æ–Ω, —Å—Ç–µ–∫–ª–æ. –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è: 
–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–≤—ã, —Å—É–∫–∫—É–ª–µ–Ω—Ç—ã, –≤–µ—á–Ω–æ–∑–µ–ª–µ–Ω—ã–µ –∫—É—Å—Ç–∞—Ä–Ω–∏–∫–∏.

–í–∞—Ä–∏–∞–Ω—Ç 3: –£—é—Ç–Ω—ã–π —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —Å–∞–¥ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ö—é–≥–≥–µ
–≠—Ç–æ—Ç –¥–∏–∑–∞–π–Ω —Å–æ–∑–¥–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —É—é—Ç–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞. –ú–Ω–æ–≥–æ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: 
—Å–∫–∞–º–µ–π–∫–∏, –ø–µ—Ä–≥–æ–ª—ã, –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã. –†–∞—Å—Ç–µ–Ω–∏—è –ø–æ–¥–æ–±—Ä–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 
—É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã: –ª–∞–≤–∞–Ω–¥–∞, —Ä–æ–∑—ã, –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–≤—ã. –î–æ–±–∞–≤–ª–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Å–≤–µ—â–µ–Ω–∏—è 
–∏ —É—é—Ç–Ω—ã–µ —É–≥–æ–ª–∫–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.
''';

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
    final textFile = File(path.join(outputDir, 'example_response.txt'));
    await textFile.writeAsString(exampleText);
    print('üìÑ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: example_response.txt');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∏)
    for (var i = 1; i <= 3; i++) {
      final exampleImage = File(path.join(outputDir, 'example_result_$i.jpg'));
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
      await exampleImage.writeAsString('–ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è $i (–∑–∞–≥–ª—É—à–∫–∞)');
      print('üñºÔ∏è –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: example_result_$i.jpg');
    }
  }
}

/// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
Future<void> main() async {
  print('üé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Gemini Image Generation');
  print('=======================================');
  print('');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
  final currentDir = Directory.current.path;
  final testImagesDir = path.join(currentDir, 'test-images');
  final outputDir = path.join(testImagesDir, 'test-gemini');

  // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
  final demo = GeminiImageDemo(
    testImagesDir: testImagesDir,
    outputDir: outputDir,
  );

  try {
    await demo.runDemo();
  } catch (e) {
    print('');
    print('üí• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: $e');
    exit(1);
  }
}
