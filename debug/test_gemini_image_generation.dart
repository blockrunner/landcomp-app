/// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–æ–¥–µ–ª—å Gemini 2.5 Flash Image
/// 
/// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
/// 1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ test-images
/// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –º–æ–¥–µ–ª—å gemini-2.5-flash-image —Å –ø—Ä–æ–º–ø—Ç–æ–º
/// 3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç –≤ –ø–∞–ø–∫—É test-images/test-gemini
library;

import 'dart:io';
import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:dio/io.dart';
import 'package:dio/browser.dart';
import 'package:path/path.dart' as path;
import 'package:hive/hive.dart';
import 'package:flutter/foundation.dart';
import 'package:landcomp_app/core/config/env_config.dart';

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Gemini Image Generation
class GeminiImageTest {
  
  GeminiImageTest({
    required this.apiKey,
    required this.testImagesDir,
    required this.outputDir,
    this.proxyUrl,
    this.backupProxies = const [],
  });
  static const String _modelName = 'gemini-2.5-flash-image-preview';
  static const String _apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/$_modelName:generateContent';
  static const String _prompt = '–æ–±—ä–µ–¥–∏–Ω–∏ —ç—Ç–∏ —Ñ–æ—Ç–æ –≤ –æ–¥–∏–Ω —É—á–∞—Å—Ç–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å–¥–µ–ª–∞–π 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∞—Ä–∞–∏–Ω—Ç–∞ –∏ –æ–ø–∏—à–∏ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö';
  
  final String apiKey;
  final String testImagesDir;
  final String outputDir;
  final String? proxyUrl;
  final List<String> backupProxies;
  late Box<dynamic> _cacheBox;
  late Dio _dio;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
  Future<void> _initCache() async {
    try {
      _cacheBox = await Hive.openBox('gemini_cache');
      print('üíæ –ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: $e');
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
      _cacheBox = Hive.box('temp_cache');
    }
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dio —Å –ø—Ä–æ–∫—Å–∏
  void _initDio() {
    _dio = Dio();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
    _dio.options.connectTimeout = const Duration(seconds: 30);
    _dio.options.receiveTimeout = const Duration(seconds: 60);
    _dio.options.sendTimeout = const Duration(seconds: 30);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
    _configureProxy();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã
    _dio.interceptors.add(_createLoggingInterceptor());
    _dio.interceptors.add(_createRetryInterceptor());
  }

  /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  void _configureProxy() {
    if (proxyUrl == null || proxyUrl!.isEmpty) {
      // –ù–µ—Ç –ø—Ä–æ–∫—Å–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (kIsWeb) {
        _dio.httpClientAdapter = BrowserHttpClientAdapter();
      }
      return;
    }

    try {
      // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ URL
      final proxyUri = Uri.parse(proxyUrl!);
      
      if (kIsWeb) {
        // –î–ª—è –≤–µ–± –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º BrowserHttpClientAdapter
        _dio.httpClientAdapter = BrowserHttpClientAdapter();
        
        // –î–ª—è –≤–µ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ CORS –ø—Ä–æ–∫—Å–∏
        _configureWebProxy(proxyUri);
      } else {
        // –î–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏—Å–ø–æ–ª—å–∑—É–µ–º IOHttpClientAdapter —Å –ø—Ä–æ–∫—Å–∏
        _dio.options.baseUrl = '';
        
        (_dio.httpClientAdapter as IOHttpClientAdapter).createHttpClient = () {
          final client = HttpClient();
          client.findProxy = (uri) {
            return 'PROXY ${proxyUri.host}:${proxyUri.port}';
          };
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
          if (proxyUri.userInfo.isNotEmpty) {
            final credentials = proxyUri.userInfo.split(':');
            if (credentials.length == 2) {
              client.authenticate = (uri, scheme, realm) async {
                client.addCredentials(uri, scheme, 
                  HttpClientBasicCredentials(credentials[0], credentials[1]));
                return true;
              };
            }
          }
          
          return client;
        };
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: $e');
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
      if (kIsWeb) {
        _dio.httpClientAdapter = BrowserHttpClientAdapter();
      }
    }
  }

  /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –≤–µ–± –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  void _configureWebProxy(Uri proxyUri) {
    // –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å SOCKS5 –ø—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    _dio.options.baseUrl = 'http://localhost:3001';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Å–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
    _dio.options.headers['X-Proxy-URL'] = proxyUrl;
    _dio.options.headers['X-Proxy-Host'] = proxyUri.host;
    _dio.options.headers['X-Proxy-Port'] = proxyUri.port.toString();
    
    if (proxyUri.userInfo.isNotEmpty) {
      final credentials = proxyUri.userInfo.split(':');
      if (credentials.length == 2) {
        _dio.options.headers['X-Proxy-User'] = credentials[0];
        _dio.options.headers['X-Proxy-Pass'] = credentials[1];
      }
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  Interceptor _createLoggingInterceptor() {
    return InterceptorsWrapper(
      onRequest: (options, handler) {
        print('üöÄ Gemini Request: ${options.method} ${options.uri}');
        handler.next(options);
      },
      onResponse: (response, handler) {
        print('‚úÖ Gemini Response: ${response.statusCode}');
        handler.next(response);
      },
      onError: (error, handler) {
        print('‚ùå Gemini Error: ${error.message}');
        handler.next(error);
      },
    );
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–∞ —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏
  Interceptor _createRetryInterceptor() {
    return InterceptorsWrapper(
      onError: (error, handler) async {
        if (error.type == DioExceptionType.connectionTimeout ||
            error.type == DioExceptionType.receiveTimeout) {
          // –ü—Ä–æ–±—É–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –ø—Ä–æ–∫—Å–∏
          if (await _tryBackupProxy()) {
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
            try {
              final response = await _dio.fetch<Map<String, dynamic>>(error.requestOptions);
              handler.resolve(response);
              return;
            } catch (e) {
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
            }
          }
        }
        
        handler.next(error);
      },
    );
  }

  /// –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏
  Future<bool> _tryBackupProxy() async {
    final nextProxy = EnvConfig.getNextBackupProxy(proxyUrl ?? '');
    if (nextProxy != null) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∏ –ø–µ—Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º
      final test = GeminiImageTest(
        apiKey: apiKey,
        testImagesDir: testImagesDir,
        outputDir: outputDir,
        proxyUrl: nextProxy,
        backupProxies: backupProxies,
      );
      test._initDio();
      _dio = test._dio;
      return true;
    }
    return false;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–º–ø—Ç–∞
  String _generateCacheKey(List<File> imageFiles) {
    final imageHashes = imageFiles.map((file) => file.path.hashCode).join('_');
    return '${_prompt.hashCode}_$imageHashes';
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  Map<String, dynamic>? _getCachedResponse(String cacheKey) {
    try {
      final cached = _cacheBox.get(cacheKey);
      if (cached != null) {
        print('üíæ –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç');
        return Map<String, dynamic>.from(cached as Map);
      }
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: $e');
    }
    return null;
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫—ç—à
  Future<void> _cacheResponse(String cacheKey, Map<String, dynamic> response) async {
    try {
      await _cacheBox.put(cacheKey, response);
      print('üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: $e');
    }
  }

  /// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
  Future<void> runTest() async {
    print('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Gemini Image Generation...');
    print('üìÅ –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: $testImagesDir');
    print('üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $outputDir');
    print('ü§ñ –ú–æ–¥–µ–ª—å: $_modelName');
    if (proxyUrl != null) {
      print('üåê –ü—Ä–æ–∫—Å–∏: $proxyUrl');
    }
    if (backupProxies.isNotEmpty) {
      print('üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏: ${backupProxies.length}');
    }
    print('');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
      await _initCache();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Dio —Å –ø—Ä–æ–∫—Å–∏
      _initDio();
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await _createOutputDirectory();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      final imageFiles = await _getImageFiles();
      print('üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}');
      
      if (imageFiles.isEmpty) {
        print('‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ $testImagesDir');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      final cacheKey = _generateCacheKey(imageFiles);
      var response = _getCachedResponse(cacheKey);
      
      if (response == null) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini
        print('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API...');
        response = await _sendToGemini(imageFiles);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await _cacheResponse(cacheKey, response);
      } else {
        print('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç');
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      await _processResponse(response);
      
      print('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: $e');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  Future<void> _createOutputDirectory() async {
    final outputDirPath = Directory(outputDir);
    if (!await outputDirPath.exists()) {
      await outputDirPath.create(recursive: true);
      print('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $outputDir');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  Future<List<File>> _getImageFiles() async {
    final testDir = Directory(testImagesDir);
    if (!await testDir.exists()) {
      throw Exception('–ü–∞–ø–∫–∞ $testImagesDir –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    final imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    final files = <File>[];
    
    await for (final entity in testDir.list()) {
      if (entity is File) {
        final extension = path.extension(entity.path).toLowerCase();
        if (imageExtensions.contains(extension)) {
          files.add(entity);
        }
      }
    }
    
    return files;
  }


  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI
  void _logAIInteraction(String action, Map<String, dynamic> data) {
    final timestamp = DateTime.now().toIso8601String();
    final logEntry = {
      'timestamp': timestamp,
      'action': action,
      'model': _modelName,
      'proxy': proxyUrl ?? 'direct',
      'data': data,
    };
    
    try {
      _cacheBox.put('log_$timestamp', logEntry);
      print('üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: $action');
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API
  Future<Map<String, dynamic>> _sendToGemini(List<File> imageFiles) async {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    final parts = <Map<String, dynamic>>[
      {'text': _prompt}
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for (final imageFile in imageFiles) {
      final imageData = await imageFile.readAsBytes();
      final base64Image = base64Encode(imageData);
      final mimeType = _getMimeType(imageFile.path);
      
      parts.add({
        'inline_data': {
          'mime_type': mimeType,
          'data': base64Image,
        }
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    final requestBody = {
      'contents': [
        {
          'parts': parts,
        }
      ]
    };

    print('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–º–ø—Ç–æ–º...');
    print('üìù –ü—Ä–æ–º–ø—Ç: $_prompt');

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    _logAIInteraction('request_sent', {
      'image_count': imageFiles.length,
      'prompt_length': _prompt.length,
      'proxy': proxyUrl ?? 'direct',
    });

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Dio
      final response = await _dio.post<Map<String, dynamic>>(
        '$_apiUrl?key=$apiKey',
        data: requestBody,
        options: Options(
          headers: {
            'Content-Type': 'application/json',
          },
        ),
      );

      if (response.statusCode != 200) {
        _logAIInteraction('request_failed', {
          'status_code': response.statusCode,
          'error': response.data?.toString() ?? 'Unknown error',
        });
        throw Exception('–û—à–∏–±–∫–∞ API: ${response.statusCode} - ${response.data}');
      }

      final responseData = response.data!;
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      _logAIInteraction('response_received', {
        'status_code': response.statusCode,
        'response_size': response.data.toString().length,
        'candidates_count': (responseData['candidates'] as List?)?.length ?? 0,
      });

      return responseData;
    } catch (e) {
      _logAIInteraction('request_failed', {
        'error': e.toString(),
        'proxy': proxyUrl ?? 'direct',
      });
      rethrow;
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
  Future<void> _processResponse(Map<String, dynamic> response) async {
    print('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API');
    
    final candidates = response['candidates'] as List<dynamic>?;
    if (candidates == null || candidates.isEmpty) {
      throw Exception('–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ');
    }

    final candidate = candidates.first;
    final content = candidate['content'] as Map<String, dynamic>?;
    if (content == null) {
      throw Exception('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ');
    }

    final parts = content['parts'] as List<dynamic>?;
    if (parts == null || parts.isEmpty) {
      throw Exception('–ù–µ—Ç —á–∞—Å—Ç–µ–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ');
    }

    var imageCount = 0;
    final textParts = <String>[];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    for (final part in parts) {
      if (part['text'] != null) {
        // –¢–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å
        final text = part['text'] as String;
        textParts.add(text);
        print('üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤');
      } else if (part['inline_data'] != null) {
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        final inlineData = part['inline_data'] as Map<String, dynamic>;
        final imageData = inlineData['data'] as String;
        final mimeType = inlineData['mime_type'] as String;
        
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        final imageBytes = base64Decode(imageData);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        final extension = _getExtensionFromMimeType(mimeType);
        final fileName = 'gemini_result_${++imageCount}$extension';
        final filePath = path.join(outputDir, fileName);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        final file = File(filePath);
        await file.writeAsBytes(imageBytes);
        
        print('üñºÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $fileName (${imageBytes.length} –±–∞–π—Ç)');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    if (textParts.isNotEmpty) {
      final fullText = textParts.join('\n\n');
      final textFile = File(path.join(outputDir, 'gemini_response.txt'));
      await textFile.writeAsString(fullText);
      print('üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—Å—Ç: gemini_response.txt');
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print('');
    print('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    print('   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: $imageCount');
    print('   - –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π: ${textParts.length}');
    print('   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${textParts.join().length} —Å–∏–º–≤–æ–ª–æ–≤');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
  String _getMimeType(String filePath) {
    final extension = path.extension(filePath).toLowerCase();
    switch (extension) {
      case '.jpg':
      case '.jpeg':
        return 'image/jpeg';
      case '.png':
        return 'image/png';
      case '.gif':
        return 'image/gif';
      case '.bmp':
        return 'image/bmp';
      case '.webp':
        return 'image/webp';
      default:
        return 'image/jpeg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ MIME —Ç–∏–ø—É
  String _getExtensionFromMimeType(String mimeType) {
    switch (mimeType) {
      case 'image/jpeg':
        return '.jpg';
      case 'image/png':
        return '.png';
      case 'image/gif':
        return '.gif';
      case 'image/bmp':
        return '.bmp';
      case 'image/webp':
        return '.webp';
      default:
        return '.jpg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }
}

/// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
Future<void> main() async {
  print('üé® –¢–µ—Å—Ç Gemini Image Generation');
  print('================================');
  print('');

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ EnvConfig
  final apiKey = EnvConfig.googleApiKey;
  if (apiKey.isEmpty) {
    print('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    print('');
    print('üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    print('   set GOOGLE_API_KEY=your_api_key_here');
    print('');
    print('üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://aistudio.google.com/app/apikey');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
  final proxyUrl = EnvConfig.getCurrentProxy();
  final backupProxies = EnvConfig.backupProxies;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
  final currentDir = Directory.current.path;
  final testImagesDir = path.join(currentDir, 'test-images');
  final outputDir = path.join(testImagesDir, 'test-gemini');

  // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
  final test = GeminiImageTest(
    apiKey: apiKey,
    testImagesDir: testImagesDir,
    outputDir: outputDir,
    proxyUrl: proxyUrl.isNotEmpty ? proxyUrl : null,
    backupProxies: backupProxies,
  );

  try {
    await test.runTest();
  } catch (e) {
    print('');
    print('üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: $e');
    exit(1);
  }
}
