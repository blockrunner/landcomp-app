/// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Gemini Image Generation –±–µ–∑ Flutter –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
/// 
/// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
/// 1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ test-images
/// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –º–æ–¥–µ–ª—å gemini-2.5-flash-image —Å –ø—Ä–æ–º–ø—Ç–æ–º
/// 3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç –≤ –ø–∞–ø–∫—É test-images/test-gemini
library;

import 'dart:io';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:path/path.dart' as path;

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Gemini Image Generation
class GeminiImageTest {
  
  GeminiImageTest({
    required this.apiKey,
    required this.testImagesDir,
    required this.outputDir,
    this.proxyUrl,
    this.backupProxies = const [],
  });
  static const String _modelName = 'gemini-2.5-flash-image-preview';
  static const String _apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/$_modelName:generateContent';
  static const String _prompt = '–æ–±—ä–µ–¥–∏–Ω–∏ —ç—Ç–∏ —Ñ–æ—Ç–æ –≤ –æ–¥–∏–Ω —É—á–∞—Å—Ç–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å–¥–µ–ª–∞–π 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –æ–ø–∏—à–∏ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö';
  
  final String apiKey;
  final String testImagesDir;
  final String outputDir;
  final String? proxyUrl;
  final List<String> backupProxies;

  /// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
  Future<void> runTest() async {
    print('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Gemini Image Generation...');
    print('üìÅ –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: $testImagesDir');
    print('üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $outputDir');
    print('ü§ñ –ú–æ–¥–µ–ª—å: $_modelName');
    if (proxyUrl != null) {
      print('üåê –ü—Ä–æ–∫—Å–∏: $proxyUrl');
    }
    if (backupProxies.isNotEmpty) {
      print('üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏: ${backupProxies.length}');
    }
    print('');

    try {
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await _createOutputDirectory();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      final imageFiles = await _getImageFiles();
      print('üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}');
      
      if (imageFiles.isEmpty) {
        print('‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ $testImagesDir');
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
      print('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API...');
      final response = await _sendWithFallback(imageFiles);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      await _processResponse(response);
      
      print('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: $e');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  Future<void> _createOutputDirectory() async {
    final outputDirPath = Directory(outputDir);
    if (!await outputDirPath.exists()) {
      await outputDirPath.create(recursive: true);
      print('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $outputDir');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  Future<List<File>> _getImageFiles() async {
    final testDir = Directory(testImagesDir);
    if (!await testDir.exists()) {
      throw Exception('–ü–∞–ø–∫–∞ $testImagesDir –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    final imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    final files = <File>[];
    
    await for (final entity in testDir.list()) {
      if (entity is File) {
        final extension = path.extension(entity.path).toLowerCase();
        if (imageExtensions.contains(extension)) {
          files.add(entity);
        }
      }
    }
    
    return files;
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –¥–ª—è –ø—Ä–æ–∫—Å–∏
  Future<Map<String, dynamic>> _sendWithFallback(List<File> imageFiles) async {
    final proxies = <String>[];
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    proxies.add('');
    if (proxyUrl != null) proxies.add(proxyUrl!);
    proxies.addAll(backupProxies);
    
    Exception? lastException;
    
    for (var i = 0; i < proxies.length; i++) {
      final currentProxy = proxies[i];
      try {
        print('üåê –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${proxies.length}: ${currentProxy.isNotEmpty ? "–ü—Ä–æ–∫—Å–∏ $currentProxy" : "–ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"}');
        
        final test = GeminiImageTest(
          apiKey: apiKey,
          testImagesDir: testImagesDir,
          outputDir: outputDir,
          proxyUrl: currentProxy.isNotEmpty ? currentProxy : null,
          backupProxies: backupProxies,
        );
        
        return await test._sendToGemini(imageFiles);
      } catch (e) {
        lastException = e is Exception ? e : Exception(e.toString());
        print('‚ùå –û—à–∏–±–∫–∞ —Å ${currentProxy.isNotEmpty ? "–ø—Ä–æ–∫—Å–∏ $currentProxy" : "–ø—Ä—è–º—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"}: $e');
        
        if (i < proxies.length - 1) {
          print('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç...');
          await Future.delayed(const Duration(seconds: 2)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        }
      }
    }
    
    throw lastException ?? Exception('–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏
  http.Client _createHttpClient() {
    if (proxyUrl == null || proxyUrl!.isEmpty) {
      return http.Client();
    }

    try {
      // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ URL
      final proxyUri = Uri.parse(proxyUrl!);
      
      // –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏
      final client = http.Client();
      
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
      return client;
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: $e');
      return http.Client();
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API
  Future<Map<String, dynamic>> _sendToGemini(List<File> imageFiles) async {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    final parts = <Map<String, dynamic>>[
      {'text': _prompt}
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for (final imageFile in imageFiles) {
      final imageData = await imageFile.readAsBytes();
      final base64Image = base64Encode(imageData);
      final mimeType = _getMimeType(imageFile.path);
      
      parts.add({
        'inline_data': {
          'mime_type': mimeType,
          'data': base64Image,
        }
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    final requestBody = {
      'contents': [
        {
          'parts': parts,
        }
      ]
    };

    print('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–º–ø—Ç–æ–º...');
    print('üìù –ü—Ä–æ–º–ø—Ç: $_prompt');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    String requestUrl;
    if (proxyUrl != null && proxyUrl!.isNotEmpty) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
      requestUrl = 'http://localhost:3001/proxy/gemini/v1beta/models/$_modelName:generateContent?key=$apiKey';
      print('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä: localhost:3001');
    } else {
      // –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      requestUrl = '$_apiUrl?key=$apiKey';
      print('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    }

    // –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
    final client = http.Client();
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      final response = await client.post(
        Uri.parse(requestUrl),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode(requestBody),
      );

      if (response.statusCode != 200) {
        throw Exception('–û—à–∏–±–∫–∞ API: ${response.statusCode} - ${response.body}');
      }

      final responseData = jsonDecode(response.body) as Map<String, dynamic>;
      print('üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: ${json.encode(responseData)}');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ parts –≤ candidates
      if (responseData['candidates'] != null && responseData['candidates'] is List) {
        final candidates = responseData['candidates'] as List;
        if (candidates.isNotEmpty) {
          final candidate = candidates[0] as Map<String, dynamic>;
          print('üîç Candidate keys: ${candidate.keys.join(', ')}');
          if (candidate['content'] != null) {
            print('‚úÖ –ù–∞–π–¥–µ–Ω content –≤ candidate');
            final content = candidate['content'] as Map<String, dynamic>;
            print('üîç Content keys: ${content.keys.join(', ')}');
          }
        }
      }
      
      return responseData;
    } finally {
      client.close();
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
  Future<void> _processResponse(Map<String, dynamic> response) async {
    print('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini API');
    
    final candidates = response['candidates'] as List<dynamic>?;
    if (candidates == null || candidates.isEmpty) {
      throw Exception('–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ');
    }

    final candidate = candidates.first;
    final content = candidate['content'] as Map<String, dynamic>?;
    if (content == null) {
      throw Exception('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ');
    }

    final parts = content['parts'] as List<dynamic>?;
    if (parts == null || parts.isEmpty) {
      throw Exception('–ù–µ—Ç —á–∞—Å—Ç–µ–π –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ');
    }

    var imageCount = 0;
    final textParts = <String>[];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    print('üîç –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –≤ –æ—Ç–≤–µ—Ç–µ: ${parts.length}');
    for (var i = 0; i < parts.length; i++) {
      final part = parts[i] as Map<String, dynamic>;
      print('üîç –ß–∞—Å—Ç—å $i —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: ${part.keys.join(', ')}');
      
      if (part['text'] != null) {
        // –¢–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å
        final text = part['text'] as String;
        textParts.add(text);
        print('üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤');
      } else if (part['inline_data'] != null || part['inlineData'] != null) {
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        final inlineData = (part['inline_data'] ?? part['inlineData']) as Map<String, dynamic>;
        final imageData = inlineData['data'] as String;
        final mimeType = (inlineData['mime_type'] ?? inlineData['mimeType']) as String;
        
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        final imageBytes = base64Decode(imageData);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        final extension = _getExtensionFromMimeType(mimeType);
        final fileName = 'gemini_result_${++imageCount}$extension';
        final filePath = path.join(outputDir, fileName);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        final file = File(filePath);
        await file.writeAsBytes(imageBytes);
        
        print('üñºÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $fileName (${imageBytes.length} –±–∞–π—Ç)');
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    if (textParts.isNotEmpty) {
      final fullText = textParts.join('\n\n');
      final textFile = File(path.join(outputDir, 'gemini_response.txt'));
      await textFile.writeAsString(fullText);
      print('üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—Å—Ç: gemini_response.txt');
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print('');
    print('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    print('   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: $imageCount');
    print('   - –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π: ${textParts.length}');
    print('   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: ${textParts.join().length} —Å–∏–º–≤–æ–ª–æ–≤');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
  String _getMimeType(String filePath) {
    final extension = path.extension(filePath).toLowerCase();
    switch (extension) {
      case '.jpg':
      case '.jpeg':
        return 'image/jpeg';
      case '.png':
        return 'image/png';
      case '.gif':
        return 'image/gif';
      case '.bmp':
        return 'image/bmp';
      case '.webp':
        return 'image/webp';
      default:
        return 'image/jpeg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ MIME —Ç–∏–ø—É
  String _getExtensionFromMimeType(String mimeType) {
    switch (mimeType) {
      case 'image/jpeg':
        return '.jpg';
      case 'image/png':
        return '.png';
      case 'image/gif':
        return '.gif';
      case 'image/bmp':
        return '.bmp';
      case 'image/webp':
        return '.webp';
      default:
        return '.jpg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }
}

/// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
Future<void> main() async {
  print('üé® –¢–µ—Å—Ç Gemini Image Generation (–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
  print('==================================================');
  print('');

  // –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
  final envFile = File('.env');
  if (!await envFile.exists()) {
    print('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
    print('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return;
  }

  final envContent = await envFile.readAsString();
  final envVars = <String, String>{};
  
  for (final line in envContent.split('\n')) {
    if (line.trim().isEmpty || line.startsWith('#')) continue;
    final parts = line.split('=');
    if (parts.length >= 2) {
      final key = parts[0].trim();
      final value = parts.sublist(1).join('=').trim().replaceAll('"', '');
      envVars[key] = value;
    }
  }

  print('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env');
  print('   Google –∫–ª—é—á: ${envVars['GOOGLE_API_KEY']?.substring(0, 10)}...');
  print('   –ü—Ä–æ–∫—Å–∏: ${envVars['ALL_PROXY']?.substring(0, 20)}...\n');

  // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ .env —Ñ–∞–π–ª–∞
  final apiKey = envVars['GOOGLE_API_KEY'];
  if (apiKey == null || apiKey.isEmpty) {
    print('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY –≤ .env —Ñ–∞–π–ª–µ');
    print('');
    print('üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
    print('   GOOGLE_API_KEY=your_api_key_here');
    print('');
    print('üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://aistudio.google.com/app/apikey');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
  final proxyUrl = envVars['ALL_PROXY'];
  final backupProxiesStr = envVars['BACKUP_PROXIES'] ?? '';
  final backupProxies = backupProxiesStr.split(',').where((proxy) => proxy.isNotEmpty).toList();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
  final currentDir = Directory.current.path;
  final testImagesDir = path.join(currentDir, 'test-images');
  final outputDir = path.join(testImagesDir, 'test-gemini');

  // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
  final test = GeminiImageTest(
    apiKey: apiKey,
    testImagesDir: testImagesDir,
    outputDir: outputDir,
    proxyUrl: proxyUrl?.isNotEmpty ?? false ? proxyUrl : null,
    backupProxies: backupProxies,
  );

  try {
    await test.runTest();
  } catch (e) {
    print('');
    print('üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: $e');
    exit(1);
  }
}
