/// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –±–µ–∑ Flutter –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
/// 
/// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç API –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ HTTP
library;

import 'dart:io';
import 'dart:convert';

void main() async {
  print('üß™ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤...\n');

  // –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
  final envFile = File('.env');
  if (!await envFile.exists()) {
    print('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  final envContent = await envFile.readAsString();
  final envVars = <String, String>{};
  
  for (final line in envContent.split('\n')) {
    if (line.trim().isEmpty || line.startsWith('#')) continue;
    final parts = line.split('=');
    if (parts.length >= 2) {
      final key = parts[0].trim();
      final value = parts.sublist(1).join('=').trim().replaceAll('"', '');
      envVars[key] = value;
    }
  }

  print('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  print('   OpenAI –∫–ª—é—á: ${envVars['OPENAI_API_KEY']?.substring(0, 10)}...');
  print('   Google –∫–ª—é—á: ${envVars['GOOGLE_API_KEY']?.substring(0, 10)}...');
  print('   –ü—Ä–æ–∫—Å–∏: ${envVars['ALL_PROXY']?.substring(0, 20)}...\n');

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API
  await testOpenAIAPI(envVars);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Gemini API
  await testGeminiAPI(envVars);
  
  print('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

/// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API
Future<void> testOpenAIAPI(Map<String, String> envVars) async {
  print('üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API...');
  
  final apiKey = envVars['OPENAI_API_KEY'];
  if (apiKey == null || apiKey.isEmpty) {
    print('‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  final client = HttpClient();
  try {
    final request = await client.postUrl(
      Uri.parse('https://api.openai.com/v1/chat/completions')
    );
    
    request.headers.set('Authorization', 'Bearer $apiKey');
    request.headers.set('Content-Type', 'application/json');
    
    final requestBody = {
      'model': 'gpt-4',
      'messages': [
        {'role': 'system', 'content': '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.'},
        {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'},
      ],
      'max_tokens': 100,
      'temperature': 0.7,
      'stream': false,
    };
    
    request.write(utf8.encode(jsonEncode(requestBody)));
    final response = await request.close();
    
    if (response.statusCode == 200) {
      final responseBody = await response.transform(utf8.decoder).join();
      final data = jsonDecode(responseBody) as Map<String, dynamic>;
      final choices = data['choices'] as List<dynamic>;
      if (choices.isNotEmpty) {
        final messageObj = choices[0]['message'] as Map<String, dynamic>;
        final content = messageObj['content'] as String?;
        print('‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        print('üìù –û—Ç–≤–µ—Ç: ${content?.substring(0, content.length > 100 ? 100 : content.length)}...');
      } else {
        print('‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI');
      }
    } else {
      print('‚ùå OpenAI API –æ—à–∏–±–∫–∞: ${response.statusCode}');
      final responseBody = await response.transform(utf8.decoder).join();
      print('üìÑ –û—Ç–≤–µ—Ç: $responseBody');
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ OpenAI API: $e');
  } finally {
    client.close();
  }
}

/// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Gemini API
Future<void> testGeminiAPI(Map<String, String> envVars) async {
  print('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Gemini API...');
  
  final apiKey = envVars['GOOGLE_API_KEY'];
  if (apiKey == null || apiKey.isEmpty) {
    print('‚ùå Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  final client = HttpClient();
  try {
    final request = await client.postUrl(
      Uri.parse('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$apiKey')
    );
    
    request.headers.set('Content-Type', 'application/json');
    
    final requestBody = {
      'contents': [
        {
          'role': 'user',
          'parts': [
            {'text': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'},
          ],
        },
      ],
    };
    
    final jsonBody = jsonEncode(requestBody);
    print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON: $jsonBody');
    request.write(utf8.encode(jsonBody));
    final response = await request.close();
    
    if (response.statusCode == 200) {
      final responseBody = await response.transform(utf8.decoder).join();
      final data = jsonDecode(responseBody) as Map<String, dynamic>;
      final candidates = data['candidates'] as List<dynamic>;
      if (candidates.isNotEmpty) {
        final candidate = candidates[0] as Map<String, dynamic>;
        final content = candidate['content'] as Map<String, dynamic>?;
        if (content != null) {
          final parts = content['parts'] as List<dynamic>?;
          if (parts != null && parts.isNotEmpty) {
            final text = parts[0]['text'] as String?;
            print('‚úÖ Google Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            print('üìù –û—Ç–≤–µ—Ç: ${text?.substring(0, text.length > 100 ? 100 : text.length)}...');
          } else {
            print('‚ùå –ü—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ Gemini');
          }
        } else {
          print('‚ùå –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ Gemini');
        }
      } else {
        print('‚ùå –ü—É—Å—Ç—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ Gemini');
      }
    } else {
      print('‚ùå Google Gemini API –æ—à–∏–±–∫–∞: ${response.statusCode}');
      final responseBody = await response.transform(utf8.decoder).join();
      print('üìÑ –û—Ç–≤–µ—Ç: $responseBody');
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ Google Gemini API: $e');
  } finally {
    client.close();
  }
}
