import 'dart:io';
import 'dart:convert';
import 'dart:typed_data';
import 'dart:math';
import 'package:dio/dio.dart';
import 'package:dio/io.dart';
import 'package:image/image.dart' as img;

/// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
/// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Ö
void main() async {
  print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞');
  
  // –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —á–∞—Ç–∞
  await testRealChatData();
}

/// –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —á–∞—Ç–∞
Future<void> testRealChatData() async {
  print('\nüí¨ –¢–µ—Å—Ç: –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    final imageFile = File('../test-images/test_image2.jpg');
    if (!await imageFile.exists()) {
      print('‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ../test-images/test_image2.jpg');
      return;
    }
    
    final imageBytes = await imageFile.readAsBytes();
    print('üì∏ –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: ${imageBytes.length} bytes');
    
    // –°–∂–∏–º–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
    final compressedImage = await compressImage(imageBytes, maxSizeKb: 25);
    print('üì∏ –†–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: ${compressedImage.length} bytes');
    
    // –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
    final base64Image = base64Encode(compressedImage);
    print('üì∏ –†–∞–∑–º–µ—Ä base64: ${base64Image.length} —Å–∏–º–≤–æ–ª–æ–≤');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    final response = await sendToOpenAIWithHistory(
      message: '–∫–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –Ω–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ?',
      imageBase64: base64Image,
      systemPrompt: '''–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–∞–¥–æ–≤–Ω–∏–∫ —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. 
–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–£—á–∏—Ç—ã–≤–∞–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∫–ª–∏–º–∞—Ç –∏ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.
–£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ä–∞–Ω–µ–µ.''',
      conversationHistory: [
        {
          'role': 'user',
          'content': '–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –µ—Å—Ç—å —É—á–∞—Å—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—É—Å—Ç—Ä–æ–∏—Ç—å.',
        },
        {
          'role': 'assistant', 
          'content': '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –æ–±—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–∫–∞. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ - –∫–∞–∫–æ–π —É –Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å, –∏ —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å?',
        },
      ],
    );
    
    print('‚úÖ –û—Ç–≤–µ—Ç OpenAI: $response');
    
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —á–∞—Ç–∞: $e');
  }
}

/// –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–æ–ø–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞)
Future<Uint8List> compressImage(Uint8List imageData, {int maxSizeKb = 25}) async {
  try {
    final image = img.decodeImage(imageData);
    if (image == null) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return imageData;
    }

    final originalSizeKb = imageData.length / 1024;
    print('üì∏ –û—Ä–∏–≥–∏–Ω–∞–ª: ${image.width}x${image.height}, ${originalSizeKb.toStringAsFixed(1)}KB');

    if (originalSizeKb <= maxSizeKb) {
      print('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª–µ–Ω—å–∫–æ–µ');
      return imageData;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
    final targetPixels = (maxSizeKb * 1024 * 10) / 3; // RGB = 3 bytes per pixel
    final currentPixels = image.width * image.height;
    final ratio = sqrt(targetPixels / currentPixels);
    
    final newWidth = (image.width * ratio).toInt();
    final newHeight = (image.height * ratio).toInt();

    print('üì∏ –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ ${newWidth}x${newHeight}');
    final resized = img.copyResize(image, width: newWidth, height: newHeight);

    // –ö–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ JPEG —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 85
    final compressed = Uint8List.fromList(img.encodeJpg(resized, quality: 85));
    final compressedSizeKb = compressed.length / 1024;

    print('‚úÖ –°–∂–∞—Ç–æ: ${compressedSizeKb.toStringAsFixed(1)}KB (${((1 - compressedSizeKb / originalSizeKb) * 100).toStringAsFixed(1)}% —Å–∂–∞—Ç–∏–µ)');
    
    return compressed;
  } catch (e) {
    print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: $e, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª');
    return imageData;
  }
}

/// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ)
Future<String> sendToOpenAIWithHistory({
  required String message,
  required String imageBase64,
  required String systemPrompt,
  required List<Map<String, dynamic>> conversationHistory,
}) async {
  final dio = Dio();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
  (dio.httpClientAdapter as IOHttpClientAdapter).createHttpClient = () {
    final client = HttpClient();
    client.findProxy = (uri) {
      return 'PROXY localhost:3001';
    };
    return client;
  };
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
  dio.options.connectTimeout = const Duration(seconds: 30);
  dio.options.receiveTimeout = const Duration(seconds: 60);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  dio.interceptors.add(LogInterceptor(
    requestBody: true,
    responseBody: true,
    logPrint: (obj) => print('üåê $obj'),
  ));
  
  try {
    print('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI —Å –∏—Å—Ç–æ—Ä–∏–µ–π...');
    
    // –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
    final messages = <Map<String, dynamic>>[];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    messages.add({
      'role': 'system',
      'content': systemPrompt,
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    for (final historyMessage in conversationHistory) {
      messages.add({
        'role': historyMessage['role'],
        'content': historyMessage['content'],
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    messages.add({
      'role': 'user',
      'content': [
        {
          'type': 'text',
          'text': message,
        },
        {
          'type': 'image_url',
          'image_url': {
            'url': 'data:image/jpeg;base64,$imageBase64',
          },
        },
      ],
    });
    
    print('üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π');
    print('üì∏ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    
    final response = await dio.post(
      'http://localhost:3001/proxy/openai/v1/chat/completions',
      options: Options(
        headers: {
          'Authorization': 'Bearer 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',
          'Content-Type': 'application/json',
        },
        validateStatus: (status) => status != null && status < 500,
      ),
      data: {
        'model': 'gpt-4o',
        'messages': messages,
        'max_tokens': 4000, // –ö–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
        'temperature': 0.7,
      },
    );
    
    print('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');
    
    if (response.statusCode == 200) {
      final data = response.data;
      final content = data['choices'][0]['message']['content'] as String;
      return content;
    } else {
      final errorData = response.data;
      final errorMessage = errorData?['error']?['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      throw Exception('OpenAI API error (${response.statusCode}): $errorMessage');
    }
    
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: $e');
    rethrow;
  }
}
