/// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
/// 
/// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AIService
/// –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é –∏ –ø—Ä–æ–∫—Å–∏.
library;

import 'dart:io';
import 'package:dio/dio.dart';
import 'package:dio/io.dart';

/// –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
class NetworkConnectionTester {
  static Future<void> runAllTests() async {
    print('üåê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...\n');
    
    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await _testBasicHttpConnection();
      
      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
      await _testProxyConnection();
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –Ω–∞–ø—Ä—è–º—É—é
      await _testOpenAIDirect();
      
      // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Gemini API –Ω–∞–ø—Ä—è–º—É—é
      await _testGoogleGeminiDirect();
      
      // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
      await _testTimeouts();
      
      print('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
      
    } catch (e) {
      print('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏: $e');
    }
  }
  
  /// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  static Future<void> _testBasicHttpConnection() async {
    print('üîó –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    
    final dio = Dio();
    dio.options.connectTimeout = const Duration(seconds: 10);
    dio.options.receiveTimeout = const Duration(seconds: 10);
    
    try {
      final response = await dio.get('https://httpbin.org/get');
      print('   ‚úÖ –ë–∞–∑–æ–≤–æ–µ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${response.statusCode}\n');
    } catch (e) {
      print('   ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e\n');
    }
  }
  
  /// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  static Future<void> _testProxyConnection() async {
    print('üîí –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
    
    final proxyUrl = Platform.environment['ALL_PROXY'] ?? '';
    if (proxyUrl.isEmpty) {
      print('   ‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç\n');
      return;
    }
    
    print('   üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: $proxyUrl');
    
    final dio = Dio();
    dio.options.connectTimeout = const Duration(seconds: 15);
    dio.options.receiveTimeout = const Duration(seconds: 15);
    
    try {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
      (dio.httpClientAdapter as IOHttpClientAdapter).createHttpClient = () {
        final client = HttpClient();
        final proxyUri = Uri.parse(proxyUrl);
        
        client.findProxy = (uri) {
          return 'PROXY ${proxyUri.host}:${proxyUri.port}';
        };
        
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        if (proxyUri.userInfo.isNotEmpty) {
          final credentials = proxyUri.userInfo.split(':');
          if (credentials.length == 2) {
            client.authenticate = (uri, scheme, realm) async {
              client.addCredentials(uri, scheme, 
                HttpClientBasicCredentials(credentials[0], credentials[1]));
              return true;
            };
          }
        }
        
        return client;
      };
      
      final response = await dio.get('https://httpbin.org/get');
      print('   ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${response.statusCode}\n');
    } catch (e) {
      print('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: $e\n');
    }
  }
  
  /// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –Ω–∞–ø—Ä—è–º—É—é
  static Future<void> _testOpenAIDirect() async {
    print('ü§ñ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –Ω–∞–ø—Ä—è–º—É—é...');
    
    final apiKey = Platform.environment['OPENAI_API_KEY'] ?? '';
    if (apiKey.isEmpty) {
      print('   ‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç\n');
      return;
    }
    
    final dio = Dio();
    dio.options.connectTimeout = const Duration(seconds: 30);
    dio.options.receiveTimeout = const Duration(seconds: 60);
    
    try {
      final response = await dio.post(
        'https://api.openai.com/v1/chat/completions',
        options: Options(
          headers: {
            'Authorization': 'Bearer $apiKey',
            'Content-Type': 'application/json',
          },
        ),
        data: {
          'model': 'gpt-3.5-turbo',
          'messages': [
            {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç.'},
          ],
          'max_tokens': 50,
        },
      );
      
      if (response.statusCode == 200) {
        print('   ‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${response.statusCode}\n');
      } else {
        print('   ‚ö†Ô∏è OpenAI API –æ—Ç–≤–µ—Ç–∏–ª: ${response.statusCode}\n');
      }
    } catch (e) {
      print('   ‚ùå –û—à–∏–±–∫–∞ OpenAI API: $e\n');
    }
  }
  
  /// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Gemini API –Ω–∞–ø—Ä—è–º—É—é
  static Future<void> _testGoogleGeminiDirect() async {
    print('üîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Gemini API –Ω–∞–ø—Ä—è–º—É—é...');
    
    final apiKey = Platform.environment['GOOGLE_API_KEY'] ?? '';
    if (apiKey.isEmpty) {
      print('   ‚ö†Ô∏è Google API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç\n');
      return;
    }
    
    final dio = Dio();
    dio.options.connectTimeout = const Duration(seconds: 30);
    dio.options.receiveTimeout = const Duration(seconds: 60);
    
    try {
      final response = await dio.post(
        'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',
        queryParameters: {'key': apiKey},
        data: {
          'contents': [
            {
              'parts': [
                {'text': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç.'},
              ],
            },
          ],
          'generationConfig': {
            'temperature': 0.7,
            'maxOutputTokens': 50,
          },
        },
      );
      
      if (response.statusCode == 200) {
        print('   ‚úÖ Google Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${response.statusCode}\n');
      } else {
        print('   ‚ö†Ô∏è Google Gemini API –æ—Ç–≤–µ—Ç–∏–ª: ${response.statusCode}\n');
      }
    } catch (e) {
      print('   ‚ùå –û—à–∏–±–∫–∞ Google Gemini API: $e\n');
    }
  }
  
  /// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
  static Future<void> _testTimeouts() async {
    print('‚è±Ô∏è –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤...');
    
    final dio = Dio();
    dio.options.connectTimeout = const Duration(seconds: 5);
    dio.options.receiveTimeout = const Duration(seconds: 5);
    
    try {
      final stopwatch = Stopwatch()..start();
      await dio.get('https://httpbin.org/delay/2');
      stopwatch.stop();
      
      print('   ‚úÖ –¢–∞–π–º–∞—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${stopwatch.elapsedMilliseconds}ms\n');
    } catch (e) {
      if (e.toString().contains('timeout')) {
        print('   ‚úÖ –¢–∞–π–º–∞—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞)\n');
      } else {
        print('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: $e\n');
      }
    }
  }
}

/// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
void main() async {
  await NetworkConnectionTester.runAllTests();
}
