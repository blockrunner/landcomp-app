#!/usr/bin/env dart

/// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
/// 
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
/// –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

import 'dart:io';
import 'dart:typed_data';

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import 'package:landcomp_app/core/orchestrator/agent_orchestrator.dart';
import 'package:landcomp_app/core/orchestrator/intent_classifier.dart';
import 'package:landcomp_app/core/orchestrator/context_manager.dart';
import 'package:landcomp_app/shared/models/intent.dart';
import 'package:landcomp_app/features/chat/domain/entities/message.dart';
import 'package:landcomp_app/features/chat/domain/entities/attachment.dart';

void main() async {
  print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
  print('=' * 50);
  
  try {
    // 1. –¢–µ—Å—Ç Intent Classifier
    print('\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Intent Classifier...');
    await testIntentClassifier();
    
    // 2. –¢–µ—Å—Ç Context Manager
    print('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Context Manager...');
    await testContextManager();
    
    // 3. –¢–µ—Å—Ç Agent Orchestrator
    print('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Agent Orchestrator...');
    await testAgentOrchestrator();
    
    print('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    print('üéâ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
    
  } catch (e) {
    print('\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: $e');
    exit(1);
  }
}

/// –¢–µ—Å—Ç Intent Classifier
Future<void> testIntentClassifier() async {
  final classifier = IntentClassifier.instance;
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  final context = RequestContext(
    userMessage: '–∫–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫?',
    conversationHistory: [],
    attachments: [
      Attachment.image(
        id: 'test-image-1',
        name: 'test_image.jpg',
        data: Uint8List.fromList([1, 2, 3, 4, 5]), // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        mimeType: 'image/jpeg',
      ),
    ],
    metadata: {},
  );
  
  print('   üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞–º–µ—Ä–µ–Ω–∏–π...');
  
  try {
    final intent = await classifier.classifyIntent(
      '–∫–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫?',
      context,
    );
    
    print('   ‚úÖ Intent –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:');
    print('      Type: ${intent.type.name}');
    print('      Subtype: ${intent.subtype?.name ?? 'null'}');
    print('      Image Intent: ${intent.imageIntent?.name ?? 'null'}');
    print('      Images Needed: ${intent.imagesNeeded ?? 'null'}');
    print('      Confidence: ${intent.confidence}');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ image intent –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    if (intent.imageIntent == null) {
      throw Exception('Image intent –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!');
    }
    
    if (intent.imageIntent != ImageIntent.analyzeNew) {
      print('   ‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è analyzeNew, –ø–æ–ª—É—á–µ–Ω: ${intent.imageIntent!.name}');
    }
    
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: $e');
    rethrow;
  }
}

/// –¢–µ—Å—Ç Context Manager
Future<void> testContextManager() async {
  final contextManager = ContextManager.instance;
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  final testAttachments = [
    Attachment.image(
      id: 'test-image-1',
      name: 'test_image.jpg',
      data: Uint8List.fromList([1, 2, 3, 4, 5]),
      mimeType: 'image/jpeg',
    ),
  ];
  
  final testHistory = [
    Message.user(
      id: 'msg-1',
      content: '–ü—Ä–∏–≤–µ—Ç!',
    ),
    Message.ai(
      id: 'msg-2',
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –¥–µ–ª–∞?',
      agentId: 'test_agent',
    ),
  ];
  
  final testIntent = Intent(
    type: IntentType.analysis,
    subtype: IntentSubtype.landscapePlanning,
    confidence: 0.9,
    reasoning: '–¢–µ—Å—Ç–æ–≤—ã–π intent',
    imageIntent: ImageIntent.analyzeNew,
    imagesNeeded: 1,
  );
  
  print('   üñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  
  try {
    final relevantImages = await contextManager.getRelevantImages(
      userMessage: '–∫–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫?',
      conversationHistory: testHistory,
      intent: testIntent,
      currentAttachments: testAttachments,
    );
    
    print('   ‚úÖ –í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${relevantImages.length}');
    
    if (relevantImages.isEmpty) {
      throw Exception('–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!');
    }
    
    if (relevantImages.length != 1) {
      print('   ‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–æ: ${relevantImages.length}');
    }
    
    print('   üì∏ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${relevantImages.first.name}');
    
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: $e');
    rethrow;
  }
}

/// –¢–µ—Å—Ç Agent Orchestrator
Future<void> testAgentOrchestrator() async {
  final orchestrator = AgentOrchestrator.instance;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º orchestrator
  await orchestrator.initialize();
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  final testAttachments = [
    Attachment.image(
      id: 'test-image-1',
      name: 'test_image.jpg',
      data: Uint8List.fromList([1, 2, 3, 4, 5]),
      mimeType: 'image/jpeg',
    ),
  ];
  
  final testHistory = [
    Message.user(
      id: 'msg-1',
      content: '–ü—Ä–∏–≤–µ—Ç!',
    ),
  ];
  
  print('   ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞...');
  
  try {
    final response = await orchestrator.processRequest(
      userMessage: '–∫–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫?',
      conversationHistory: testHistory,
      attachments: testAttachments,
    );
    
    print('   ‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω:');
    print('      Success: ${response.isSuccess}');
    print('      Selected Agent: ${response.selectedAgent?.name ?? 'null'}');
    print('      Message Length: ${response.message?.length ?? 0}');
    
    if (!response.isSuccess) {
      throw Exception('–ó–∞–ø—Ä–æ—Å –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    }
    
    if (response.message == null || response.message!.isEmpty) {
      throw Exception('–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π!');
    }
    
    print('   üìù –û—Ç–≤–µ—Ç: ${response.message!.substring(0, response.message!.length > 100 ? 100 : response.message!.length)}...');
    
  } catch (e) {
    print('   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: $e');
    rethrow;
  }
}
