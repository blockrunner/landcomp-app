/// Test script for text-to-visualization switch fix
/// 
/// This script tests the new logic for detecting visualization requests
/// in text messages and switching to image generation mode.

void main() {
  print('üß™ Testing text-to-visualization switch fix...');
  
  // Test visualization request detection
  testVisualizationRequestDetection();
  
  // Test leading questions
  testLeadingQuestions();
  
  // Test edge cases
  testEdgeCases();
  
  print('‚úÖ Text-to-visualization switch fix tests completed');
}

/// Test detection of direct visualization requests
void testVisualizationRequestDetection() {
  print('\nüìã Test 1: Direct Visualization Requests');
  
  final directRequests = [
    '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É',
    '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 
    '–ø–æ–∫–∞–∂–∏ –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å',
    '–ø–æ–∫–∞–∂–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é',
    '—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É',
    '–Ω–∞—Ä–∏—Å—É–π',
    '–ø–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
    '–¥–∞',
    '–ø–æ–∫–∞–∂–∏',
    '–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è',
    '–∫–∞—Ä—Ç–∏–Ω–∫–∞',
    '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
  ];
  
  for (final request in directRequests) {
    final isRequest = isVisualizationRequest(request);
    print('   "$request" -> $isRequest');
    assert(isRequest, 'Should detect as visualization request');
  }
  
  print('   ‚úÖ All direct requests detected correctly');
}

/// Test detection of leading questions
void testLeadingQuestions() {
  print('\nüìã Test 2: Leading Questions');
  
  final leadingQuestions = [
    '–∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è',
    '–∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å',
    '–∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å',
    '—á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è',
    '–∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
    '–ø–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
  ];
  
  for (final question in leadingQuestions) {
    final isRequest = isVisualizationRequest(question);
    print('   "$question" -> $isRequest');
    assert(isRequest, 'Should detect as visualization request');
  }
  
  print('   ‚úÖ All leading questions detected correctly');
}

/// Test edge cases
void testEdgeCases() {
  print('\nüìã Test 3: Edge Cases');
  
  final edgeCases = [
    ('–æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö', false),
    ('—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ä–æ–∑—ã', false),
    ('–∫–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Å–∞–¥–æ–º', false),
    ('–ê –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –Ω–∞ —É—á–∞—Å—Ç–∫–µ?', true),
    ('–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É', true),
    ('–ø–æ–∫–∞–∂–∏ –º–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç', true),
  ];
  
  for (final (text, expected) in edgeCases) {
    final isRequest = isVisualizationRequest(text);
    print('   "$text" -> $isRequest (expected: $expected)');
    assert(isRequest == expected, 'Detection mismatch for: $text');
  }
  
  print('   ‚úÖ All edge cases handled correctly');
}

/// Simulate the _isVisualizationRequest method
bool isVisualizationRequest(String content) {
  final lowerContent = content.toLowerCase();
  
  // Direct visualization requests
  final directRequests = [
    '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É',
    '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    '–ø–æ–∫–∞–∂–∏ –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å',
    '–ø–æ–∫–∞–∂–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é',
    '—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É',
    '–Ω–∞—Ä–∏—Å—É–π',
    '–ø–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
    '–¥–∞',
    '–ø–æ–∫–∞–∂–∏',
    '–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è',
    '–∫–∞—Ä—Ç–∏–Ω–∫–∞',
    '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
  ];
  
  // Leading questions that imply visualization
  final leadingQuestions = [
    '–∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è',
    '–∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å',
    '–∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å',
    '—á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è',
    '–∫–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
    '–ø–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
  ];
  
  // Check for direct requests
  for (final request in directRequests) {
    if (lowerContent.contains(request)) {
      return true;
    }
  }
  
  // Check for leading questions
  for (final question in leadingQuestions) {
    if (lowerContent.contains(question)) {
      return true;
    }
  }
  
  return false;
}

/// Expected behavior after fix:
/// 
/// 1. **Direct requests**: "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É" ‚Üí Switch to image generation
/// 2. **Leading questions**: "–∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å—Å—è" ‚Üí Switch to image generation  
/// 3. **Regular questions**: "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ä–æ–∑—ã" ‚Üí Regular text response
/// 4. **Context awareness**: Uses previous images from conversation
/// 5. **Fallback**: If no images found, provides helpful message
/// 
/// The fix addresses:
/// - ‚ùå Text messages not triggering visualization
/// - ‚ùå Explicit requests ignored
/// - ‚ùå Leading questions not detected
/// - ‚ùå No context from previous images
/// - ‚úÖ Smart intent detection
/// - ‚úÖ Automatic mode switching
/// - ‚úÖ Context-aware generation
/// - ‚úÖ Graceful fallbacks
