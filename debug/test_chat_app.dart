/// –¢–µ—Å—Ç —á–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
/// 
/// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —á–∞—Ç–∞ —á–µ—Ä–µ–∑ AIService
library;

import 'dart:io';
import 'package:flutter_dotenv/flutter_dotenv.dart';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
import 'package:landcomp_app/core/config/env_config.dart';
import 'package:landcomp_app/core/network/ai_service.dart';

void main() async {
  print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...\n');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  try {
    await dotenv.load();
    print('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: $e');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  print('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
  print('   OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${EnvConfig.isOpenAIConfigured ? '‚úÖ' : '‚ùå'}');
  print('   Google –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${EnvConfig.isGoogleConfigured ? '‚úÖ' : '‚ùå'}');
  print('   –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${EnvConfig.isProxyConfigured ? '‚úÖ' : '‚ùå'}');

  if (!EnvConfig.isOpenAIConfigured && !EnvConfig.isGoogleConfigured) {
    print('‚ùå –ù–∏ –æ–¥–∏–Ω AI —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AIService
  try {
    await AIService.instance.initialize();
    print('‚úÖ AIService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AIService: $e');
    return;
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI
  if (EnvConfig.isOpenAIConfigured) {
    print('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI...');
    try {
      final response = await AIService.instance.sendToOpenAI(
        message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        systemPrompt: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.',
      );
      print('‚úÖ OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      print('üìù –û—Ç–≤–µ—Ç: ${response.substring(0, response.length > 100 ? 100 : response.length)}...');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ OpenAI: $e');
    }
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Gemini
  if (EnvConfig.isGoogleConfigured) {
    print('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Gemini...');
    try {
      final response = await AIService.instance.sendToGemini(
        message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        systemPrompt: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.',
      );
      print('‚úÖ Google Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      print('üìù –û—Ç–≤–µ—Ç: ${response.substring(0, response.length > 100 ? 100 : response.length)}...');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ Google Gemini: $e');
    }
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥
  print('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –º–µ—Ç–æ–¥–∞...');
  try {
    final response = await AIService.instance.sendMessage(
      message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
      systemPrompt: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.',
    );
    print('‚úÖ –û–±—â–∏–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    print('üìù –û—Ç–≤–µ—Ç: ${response.substring(0, response.length > 100 ? 100 : response.length)}...');
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –º–µ—Ç–æ–¥–∞: $e');
  }

  print('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}
