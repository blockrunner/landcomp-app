/// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI –∏ Google Gemini
/// 
/// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –º–æ–¥–µ–ª–µ–π
/// –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞.
library;

import 'dart:io';
import 'package:dio/dio.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

void main() async {
  print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤...\n');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  try {
    await dotenv.load();
    print('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: $e');
    return;
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API
  await testOpenAIAPI();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Gemini API
  await testGeminiAPI();
  
  print('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

/// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API
Future<void> testOpenAIAPI() async {
  print('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API...');
  
  final apiKey = dotenv.env['OPENAI_API_KEY'];
  if (apiKey == null || apiKey.isEmpty) {
    print('‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  final dio = Dio();
  dio.options.connectTimeout = const Duration(seconds: 30);
  dio.options.receiveTimeout = const Duration(seconds: 30);

  try {
    final response = await dio.post(
      'https://api.openai.com/v1/chat/completions',
      options: Options(
        headers: {
          'Authorization': 'Bearer $apiKey',
          'Content-Type': 'application/json',
        },
        validateStatus: (status) => status != null && status < 500,
      ),
      data: {
        'model': 'gpt-4',
        'messages': [
          {'role': 'system', 'content': '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.'},
          {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'},
        ],
        'max_tokens': 100,
        'temperature': 0.7,
        'stream': false,
      },
    );

    if (response.statusCode == 200) {
      final data = response.data as Map<String, dynamic>;
      final choices = data['choices'] as List<dynamic>;
      if (choices.isNotEmpty) {
        final messageObj = choices[0]['message'] as Map<String, dynamic>;
        final content = messageObj['content'] as String?;
        print('‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        print('üìù –û—Ç–≤–µ—Ç: ${content?.substring(0, content.length > 100 ? 100 : content.length)}...');
      } else {
        print('‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI');
      }
    } else {
      print('‚ùå OpenAI API –æ—à–∏–±–∫–∞: ${response.statusCode}');
      print('üìÑ –û—Ç–≤–µ—Ç: ${response.data}');
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ OpenAI API: $e');
  }
}

/// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Gemini API
Future<void> testGeminiAPI() async {
  print('\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Gemini API...');
  
  final apiKey = dotenv.env['GOOGLE_API_KEY'];
  if (apiKey == null || apiKey.isEmpty) {
    print('‚ùå Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  final dio = Dio();
  dio.options.connectTimeout = const Duration(seconds: 30);
  dio.options.receiveTimeout = const Duration(seconds: 30);

  try {
    final response = await dio.post(
      'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',
      queryParameters: {
        'key': apiKey,
      },
      options: Options(
        headers: {
          'Content-Type': 'application/json',
        },
        validateStatus: (status) => status != null && status < 500,
      ),
      data: {
        'contents': [
          {
            'role': 'user',
            'parts': [
              {'text': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'},
            ],
          },
        ],
        'generationConfig': {
          'temperature': 0.7,
          'maxOutputTokens': 100,
        },
      },
    );

    if (response.statusCode == 200) {
      final data = response.data as Map<String, dynamic>;
      final candidates = data['candidates'] as List<dynamic>;
      if (candidates.isNotEmpty) {
        final candidate = candidates[0] as Map<String, dynamic>;
        final content = candidate['content'] as Map<String, dynamic>?;
        if (content != null) {
          final parts = content['parts'] as List<dynamic>?;
          if (parts != null && parts.isNotEmpty) {
            final text = parts[0]['text'] as String?;
            print('‚úÖ Google Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
            print('üìù –û—Ç–≤–µ—Ç: ${text?.substring(0, text.length > 100 ? 100 : text.length)}...');
          } else {
            print('‚ùå –ü—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–µ Gemini');
          }
        } else {
          print('‚ùå –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ Gemini');
        }
      } else {
        print('‚ùå –ü—É—Å—Ç—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ Gemini');
      }
    } else {
      print('‚ùå Google Gemini API –æ—à–∏–±–∫–∞: ${response.statusCode}');
      print('üìÑ –û—Ç–≤–µ—Ç: ${response.data}');
    }
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ Google Gemini API: $e');
  }
}
