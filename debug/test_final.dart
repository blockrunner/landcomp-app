/// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// 
/// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
library;

import 'dart:io';
import 'dart:convert';

void main() async {
  print('üß™ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ
  print('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  try {
    final client = HttpClient();
    final request = await client.getUrl(Uri.parse('http://localhost:8083'));
    final response = await request.close();
    
    if (response.statusCode == 200) {
      print('‚úÖ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8083');
    } else {
      print('‚ùå Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${response.statusCode}');
    }
    client.close();
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é: $e');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
  print('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞...');
  try {
    final client = HttpClient();
    final request = await client.getUrl(Uri.parse('http://localhost:3001/proxy/status'));
    final response = await request.close();
    
    if (response.statusCode == 200) {
      final responseBody = await response.transform(utf8.decoder).join();
      final data = jsonDecode(responseBody) as Map<String, dynamic>;
      print('‚úÖ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      print('   –°—Ç–∞—Ç—É—Å: ${data['status']}');
      print('   –ü—Ä–æ–∫—Å–∏: ${data['mainProxy']?.toString().substring(0, 20)}...');
    } else {
      print('‚ùå –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}');
    }
    client.close();
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É: $e');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
  print('\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...');
  final envFile = File('.env');
  if (await envFile.exists()) {
    final envContent = await envFile.readAsString();
    final lines = envContent.split('\n').where((line) => 
      line.trim().isNotEmpty && !line.startsWith('#')).toList();
    
    print('‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
    print('   –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${lines.length}');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    final hasOpenAI = envContent.contains('OPENAI_API_KEY=');
    final hasGoogle = envContent.contains('GOOGLE_API_KEY=');
    final hasProxy = envContent.contains('ALL_PROXY=');
    
    print('   OpenAI –∫–ª—é—á: ${hasOpenAI ? '‚úÖ' : '‚ùå'}');
    print('   Google –∫–ª—é—á: ${hasGoogle ? '‚úÖ' : '‚ùå'}');
    print('   –ü—Ä–æ–∫—Å–∏: ${hasProxy ? '‚úÖ' : '‚ùå'}');
  } else {
    print('‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  print('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  final files = [
    'lib/core/network/ai_service.dart',
    'lib/core/config/env_config.dart',
    'lib/app/app.dart',
    'pubspec.yaml',
  ];
  
  for (final file in files) {
    final fileObj = File(file);
    if (await fileObj.exists()) {
      print('‚úÖ $file');
    } else {
      print('‚ùå $file');
    }
  }

  print('\nüéâ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  print('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  print('1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:8083');
  print('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: cd debug && node proxy-server.js');
  print('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç');
  print('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫');
}
