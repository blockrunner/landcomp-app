/// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
/// 
/// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
/// –ø—Ä–æ–±–ª–µ–º —Å AI —Å–µ—Ä–≤–∏—Å–æ–º.
library;

import 'test_ai_service.dart';
import 'test_env_config.dart';
import 'test_network_connection.dart';

/// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
class AllTestsRunner {
  static Future<void> runAllTests() async {
    print('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ AI —Å–µ—Ä–≤–∏—Å–∞...\n');
    print('=' * 60);
    
    try {
      // –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
      print('\nüìã –≠–¢–ê–ü 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      print('=' * 60);
      await EnvConfigTester.runAllTests();
      
      // –¢–µ—Å—Ç 2: –°–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      print('\nüåê –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      print('=' * 60);
      await NetworkConnectionTester.runAllTests();
      
      // –¢–µ—Å—Ç 3: AI Service
      print('\nü§ñ –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Service');
      print('=' * 60);
      await AIServiceTester.runAllTests();
      
      print('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      print('=' * 60);
      print('–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:');
      print('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AIService –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
      print('2. –û–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫ –≤ UI');
      print('3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–æ–≤');
      
    } catch (e) {
      print('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: $e');
      print('=' * 60);
      print('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      print('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª');
      print('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      print('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏');
      print('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π');
    }
  }
}

/// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
void main() async {
  await AllTestsRunner.runAllTests();
}
