// iOS Functionality Test Script
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è iOS

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'ios_test_config.dart';

void main() {
  runApp(const IOSFunctionalityTestApp());
}

class IOSFunctionalityTestApp extends StatelessWidget {
  const IOSFunctionalityTestApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'LandComp iOS Test',
      theme: ThemeData(
        primarySwatch: Colors.green,
        useMaterial3: true,
      ),
      darkTheme: ThemeData.dark().copyWith(
        useMaterial3: true,
      ),
      home: const IOSFunctionalityTestPage(),
    );
  }
}

class IOSFunctionalityTestPage extends StatefulWidget {
  const IOSFunctionalityTestPage({super.key});

  @override
  State<IOSFunctionalityTestPage> createState() => _IOSFunctionalityTestPageState();
}

class _IOSFunctionalityTestPageState extends State<IOSFunctionalityTestPage> 
    with IOSTestMixin {
  final List<String> _testResults = [];
  bool _isRunning = false;

  @override
  void initState() {
    super.initState();
    _initializeTest();
  }

  void _initializeTest() {
    IOSTestConfig.printTestEnvironmentInfo();
    _addResult('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  void _addResult(String result) {
    setState(() {
      _testResults.add('${DateTime.now().toString().substring(11, 19)}: $result');
    });
    IOSTestConfig.log(result, tag: 'TestResult');
  }

  Future<void> _runAllTests() async {
    if (_isRunning) return;
    
    setState(() {
      _isRunning = true;
      _testResults.clear();
    });

    _addResult('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è iOS —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...');

    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      await _testPlatform();
      
      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      await _testPermissions();
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await _testUIComponents();
      
      // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      await _testNavigation();
      
      // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º
      await _testThemes();
      
      // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
      await _testLocalization();
      
      // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      await _testPerformance();
      
      _addResult('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (e) {
      _addResult('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    } finally {
      setState(() {
        _isRunning = false;
      });
    }
  }

  Future<void> _testPlatform() async {
    _addResult('üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...');
    
    if (IOSTestConfig.isIOS) {
      _addResult('‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ iOS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      _addResult('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ iOS');
    }
    
    if (IOSTestConfig.isSimulator) {
      _addResult('üì± –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ');
    } else {
      _addResult('üì± –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
    }
    
    await Future.delayed(const Duration(milliseconds: 500));
  }

  Future<void> _testPermissions() async {
    _addResult('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    _addResult('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Info.plist');
    _addResult('  - NSCameraUsageDescription');
    _addResult('  - NSPhotoLibraryUsageDescription');
    _addResult('  - NSPhotoLibraryAddUsageDescription');
    
    await Future.delayed(const Duration(milliseconds: 500));
  }

  Future<void> _testUIComponents() async {
    _addResult('üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–∞
    final screenSize = MediaQuery.of(context).size;
    _addResult('üìê –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: ${screenSize.width}x${screenSize.height}');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (screenSize.width < 400) {
      _addResult('üì± –ú–∞–ª–µ–Ω—å–∫–∏–π —ç–∫—Ä–∞–Ω (iPhone SE)');
    } else if (screenSize.width < 450) {
      _addResult('üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω (iPhone 12/13/14)');
    } else {
      _addResult('üì± –ë–æ–ª—å—à–æ–π —ç–∫—Ä–∞–Ω (iPhone Pro Max)');
    }
    
    await Future.delayed(const Duration(milliseconds: 500));
  }

  Future<void> _testNavigation() async {
    _addResult('üß≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
    
    // –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
    _addResult('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
    await Future.delayed(const Duration(milliseconds: 500));
  }

  Future<void> _testThemes() async {
    _addResult('üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º...');
    
    final brightness = Theme.of(context).brightness;
    _addResult('üåì –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: ${brightness == Brightness.dark ? "–¢–µ–º–Ω–∞—è" : "–°–≤–µ—Ç–ª–∞—è"}');
    
    // –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
    _addResult('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    await Future.delayed(const Duration(milliseconds: 500));
  }

  Future<void> _testLocalization() async {
    _addResult('üåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...');
    
    final locale = Localizations.localeOf(context);
    _addResult('üó£Ô∏è –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: ${locale.languageCode}');
    
    _addResult('‚úÖ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    await Future.delayed(const Duration(milliseconds: 500));
  }

  Future<void> _testPerformance() async {
    _addResult('‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    final stopwatch = Stopwatch()..start();
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ç—è–∂–µ–ª–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    await Future.delayed(const Duration(milliseconds: 100));
    
    stopwatch.stop();
    _addResult('‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stopwatch.elapsedMilliseconds}ms');
    
    _addResult('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ');
    
    await Future.delayed(const Duration(milliseconds: 500));
  }

  void _clearResults() {
    setState(() {
      _testResults.clear();
    });
  }

  void _copyResults() {
    final results = _testResults.join('\n');
    Clipboard.setData(ClipboardData(text: results));
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('LandComp iOS Test'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        actions: [
          IconButton(
            icon: const Icon(Icons.copy),
            onPressed: _copyResults,
            tooltip: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
          ),
        ],
      ),
      body: Column(
        children: [
          // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isRunning ? null : _runAllTests,
                    icon: _isRunning 
                        ? const SizedBox(
                            width: 16,
                            height: 16,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                        : const Icon(Icons.play_arrow),
                    label: Text(_isRunning ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã'),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton.icon(
                  onPressed: _clearResults,
                  icon: const Icon(Icons.clear),
                  label: const Text('–û—á–∏—Å—Ç–∏—Ç—å'),
                ),
              ],
            ),
          ),
          
          // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ
          Card(
            margin: const EdgeInsets.symmetric(horizontal: 16),
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ',
                    style: Theme.of(context).textTheme.titleMedium,
                  ),
                  const SizedBox(height: 8),
                  Text('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${IOSTestConfig.isIOS ? "iOS" : "–î—Ä—É–≥–∞—è"}'),
                  Text('–†–µ–∂–∏–º: ${IOSTestConfig.isSimulator ? "–°–∏–º—É–ª—è—Ç–æ—Ä" : "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"}'),
                  Text('–û—Ç–ª–∞–¥–∫–∞: ${kDebugMode ? "–í–∫–ª—é—á–µ–Ω–∞" : "–û—Ç–∫–ª—é—á–µ–Ω–∞"}'),
                ],
              ),
            ),
          ),
          
          // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
          Expanded(
            child: Card(
              margin: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Padding(
                    padding: const EdgeInsets.all(16),
                    child: Text(
                      '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                  ),
                  Expanded(
                    child: _testResults.isEmpty
                        ? const Center(
                            child: Text(
                              '–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                              style: TextStyle(color: Colors.grey),
                            ),
                          )
                        : ListView.builder(
                            padding: const EdgeInsets.symmetric(horizontal: 16),
                            itemCount: _testResults.length,
                            itemBuilder: (context, index) {
                              final result = _testResults[index];
                              return Padding(
                                padding: const EdgeInsets.symmetric(vertical: 2),
                                child: Text(
                                  result,
                                  style: const TextStyle(
                                    fontFamily: 'monospace',
                                    fontSize: 12,
                                  ),
                                ),
                              );
                            },
                          ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
