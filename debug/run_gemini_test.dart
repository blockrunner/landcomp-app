/// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ Gemini Image Generation
/// 
/// –ó–∞–ø—É—Å–∫: dart run debug/run_gemini_test.dart
library;

import 'dart:io';
import 'test_gemini_image_generation.dart';
import 'package:landcomp_app/core/config/env_config.dart';

void main() async {
  print('üé® –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Gemini Image Generation');
  print('=======================================');
  print('');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
  final apiKey = EnvConfig.googleApiKey;
  if (apiKey.isEmpty) {
    print('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY');
    print('');
    print('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    print('   Windows: set GOOGLE_API_KEY=your_api_key_here');
    print('   Linux/Mac: export GOOGLE_API_KEY=your_api_key_here');
    print('');
    print('üîë –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://aistudio.google.com/app/apikey');
    exit(1);
  }

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
  final proxyUrl = EnvConfig.getCurrentProxy();
  final backupProxies = EnvConfig.backupProxies;

  print('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω');
  print('ü§ñ –ú–æ–¥–µ–ª—å: gemini-2.5-flash-image-preview');
  print('üìù –ü—Ä–æ–º–ø—Ç: –æ–±—ä–µ–¥–∏–Ω–∏ —ç—Ç–∏ —Ñ–æ—Ç–æ –≤ –æ–¥–∏–Ω —É—á–∞—Å—Ç–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å–∞–¥–æ–º –≤ —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å–¥–µ–ª–∞–π 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∞—Ä–∞–∏–Ω—Ç–∞ –∏ –æ–ø–∏—à–∏ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö');
  if (proxyUrl.isNotEmpty) {
    print('üåê –ü—Ä–æ–∫—Å–∏: $proxyUrl');
  }
  if (backupProxies.isNotEmpty) {
    print('üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏: ${backupProxies.length}');
  }
  print('');

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
  try {
    final currentDir = Directory.current.path;
    final testImagesDir = '$currentDir/test-images';
    final outputDir = '$testImagesDir/test-gemini';

    final test = GeminiImageTest(
      apiKey: apiKey,
      testImagesDir: testImagesDir,
      outputDir: outputDir,
      proxyUrl: proxyUrl.isNotEmpty ? proxyUrl : null,
      backupProxies: backupProxies,
    );

    await test.runTest();
  } catch (e) {
    print('üí• –û—à–∏–±–∫–∞: $e');
    exit(1);
  }
}
