---
alwaysApply: false
description: "Правила инженерии контекста для AI агентов - применяется при работе с AI агентами, промптами, контекстом и инструментами"
appliesTo:
  - "**/*agent*.dart"
  - "**/*prompt*.dart"
  - "**/*context*.dart"
  - "**/*ai_service*.dart"
  - "**/*chat*.dart"
  - "**/*tool*.dart"
  - "**/*mcp*.dart"
  - "**/*.md"
  - "**/*.mdc"
keywords:
  - "ai agent"
  - "prompt engineering"
  - "context engineering"
  - "ai service"
  - "chat"
  - "tools"
  - "mcp"
  - "anthropic"
  - "claude"
  - "агент"
  - "промпт"
  - "контекст"
  - "ии"
  - "искусственный интеллект"
---
# Правила инженерии контекста для AI агентов

*На основе статьи Anthropic "Effective Context Engineering for AI Agents"*

## Когда применять эти правила

Эти правила автоматически применяются при работе с:
- AI агентами и сервисами
- Промптами и системными сообщениями
- Управлением контекстом
- Инструментами и MCP
- Чат-функциональностью
- Документацией по AI

## Обзор

Эффективная инженерия контекста является ключевым аспектом при разработке агентов искусственного интеллекта. Контекст представляет собой ограниченный ресурс токенов, доступных модели во время вывода, и его правильное управление критически важно для производительности.

## Основные принципы

### 1. Четкость системных подсказок

**Принцип:** Используйте простые и прямые формулировки, которые ясно определяют ожидаемое поведение агента.

**Правила:**
- Избегайте чрезмерно сложных или слишком общих инструкций
- Используйте конкретные и однозначные формулировки
- Определяйте четкие границы ответственности агента
- Указывайте конкретные форматы вывода

**Пример хорошей подсказки:**
```
Вы - AI агент для анализа кода. Ваша задача:
1. Проанализировать предоставленный код
2. Найти потенциальные проблемы безопасности
3. Предложить улучшения
4. Вывести результат в формате JSON
```

### 2. Структурирование подсказок

**Принцип:** Организуйте подсказки в четко определенные секции для лучшего понимания модели.

**Обязательные секции:**
- `<background_information>` - контекстная информация
- `<instructions>` - основные инструкции
- `<tool guidance>` - руководство по инструментам
- `<output description>` - описание формата вывода
- `<examples>` - примеры использования

**Шаблон структуры:**
```markdown
# Роль агента
<background_information>
[Контекстная информация о задаче и домене]
</background_information>

## Инструкции
[Четкие инструкции по выполнению задач]

## Доступные инструменты
### Tool guidance
[Описание каждого инструмента и его использования]

## Формат вывода
### Output description
[Точное описание ожидаемого формата результата]

## Примеры
<examples>
[Канонические примеры использования]
</examples>
```

### 3. Оптимизация набора инструментов

**Принцип:** Предоставляйте агенту минимально необходимый набор инструментов с четко определенной функциональностью.

**Правила:**
- Каждый инструмент должен быть самодостаточным
- Избегайте дублирования функций между инструментами
- Обеспечьте четкое описание назначения каждого инструмента
- Группируйте связанные инструменты логически

**Критерии хорошего инструмента:**
- Единственная ответственность
- Четкие входные и выходные параметры
- Понятное описание функциональности
- Обработка ошибок

### 4. Использование примеров

**Принцип:** Включайте разнообразные и канонические примеры для демонстрации ожидаемого поведения.

**Типы примеров:**
- **Базовые примеры** - простые случаи использования
- **Граничные случаи** - обработка ошибок и исключений
- **Сложные сценарии** - многошаговые задачи
- **Негативные примеры** - что НЕ следует делать

**Требования к примерам:**
- Реалистичность и релевантность
- Полнота (входные данные + ожидаемый результат)
- Разнообразие сценариев
- Актуальность для домена

### 5. Динамическое управление контекстом

**Принцип:** Реализуйте механизмы для автоматического управления контекстом и сохранения важной информации.

**Стратегии управления контекстом:**

#### Приоритизация информации
- **Критическая информация** - всегда сохранять
- **Актуальная информация** - сохранять в текущем контексте
- **Историческая информация** - архивировать или удалять

#### Механизмы сохранения
- **Внешняя память** - база данных, файловая система
- **Сжатие контекста** - извлечение ключевых моментов
- **Резюмирование** - создание кратких сводок

#### Автоматическая очистка
- Удаление устаревшей информации
- Очистка нерелевантных данных
- Сжатие повторяющейся информации

## Практические рекомендации

### Разработка агентов

1. **Начните с простого** - создайте базовую версию с минимальным набором функций
2. **Итеративно улучшайте** - добавляйте сложность постепенно
3. **Тестируйте на реальных данных** - используйте реальные сценарии использования
4. **Мониторьте производительность** - отслеживайте качество и скорость работы

### Отладка и оптимизация

1. **Анализируйте логи** - изучайте, как агент обрабатывает различные входные данные
2. **Измеряйте метрики** - точность, время выполнения, использование токенов
3. **A/B тестирование** - сравнивайте разные версии подсказок
4. **Пользовательская обратная связь** - собирайте отзывы о качестве работы

### Безопасность и надежность

1. **Валидация входных данных** - проверяйте корректность входных параметров
2. **Обработка ошибок** - предусматривайте graceful degradation
3. **Ограничения доступа** - контролируйте, какие инструменты может использовать агент
4. **Логирование** - ведите подробные логи для аудита и отладки

## Метрики качества

### Производительность
- **Точность выполнения задач** - процент успешно выполненных задач
- **Время отклика** - среднее время обработки запроса
- **Использование токенов** - эффективность использования контекста

### Качество
- **Релевантность ответов** - соответствие ответов поставленной задаче
- **Полнота информации** - достаточность предоставленной информации
- **Согласованность** - стабильность качества работы

### Пользовательский опыт
- **Удовлетворенность пользователей** - оценка качества работы агента
- **Простота использования** - легкость взаимодействия с агентом
- **Надежность** - стабильность работы в различных условиях

## Заключение

Эффективная инженерия контекста требует баланса между полнотой информации и эффективностью использования ресурсов. Следуя этим принципам, можно создавать надежных и эффективных AI агентов, способных успешно выполнять сложные задачи в различных сценариях.

Помните: контекст - это ограниченный ресурс, и его правильное управление является ключом к успешной работе AI агентов.

## Практические инструкции для разработчиков

### При создании AI агентов:
1. **Следуйте структуре подсказок** - используйте обязательные секции
2. **Оптимизируйте инструменты** - минимизируйте набор, избегайте дублирования
3. **Добавляйте примеры** - включайте канонические случаи использования
4. **Управляйте контекстом** - реализуйте механизмы сжатия и сохранения

### При работе с промптами:
1. **Будьте конкретными** - избегайте общих формулировок
2. **Структурируйте информацию** - используйте XML теги и заголовки
3. **Тестируйте итеративно** - начинайте с простого, добавляйте сложность
4. **Мониторьте производительность** - отслеживайте использование токенов

### При разработке инструментов:
1. **Одна ответственность** - каждый инструмент решает одну задачу
2. **Четкие параметры** - описывайте входные и выходные данные
3. **Обработка ошибок** - предусматривайте graceful degradation
4. **Документируйте назначение** - объясняйте, когда использовать инструмент
